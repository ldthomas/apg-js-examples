#!/usr/bin/env node
/* re-generate all grammar objects */
console.log("Re-generate all grammar objects for all examples.");
let apg = require("apg-js").apg;
iin="src/ini-file/ini-file.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/ast/phone-number.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/execute-rule/more.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/execute-rule/colors.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/substrings/area-code.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/substrings/phone-number.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/look-behind/positive-grammar.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/look-behind/boundaries-grammar.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/look-behind/comment-grammar.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/look-behind/negative-grammar.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/apg-lib/phone-number.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/look-ahead/anbncn.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/look-ahead/nested.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/look-ahead/c-comment.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/apg-exp/grammars/csv.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/apg-exp/grammars/float.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/apg-exp/grammars/dangling-else-far.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/apg-exp/grammars/greek-words.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/apg-exp/grammars/ini.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/apg-exp/grammars/csv-fields.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/apg-exp/grammars/dangling-else-near.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/trace/fancy-number.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/udt/parent-u.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/udt/universal-u.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/udt/phone-number.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/back-reference/parent-mode-grammar.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/back-reference/branch-fail-grammar.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/back-reference/universal-mode-grammar.bnf";
apg([`--in=${iin}`, `--out=${iin}`]);
iin="src/odata/odata-abnf-construction-rules.txt";
apg([`--in=${iin}`, `--out=src/odata/odata-grammar`]);
